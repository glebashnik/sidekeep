//Accessin user data requires uid (not good).
//Accessing feed content requires password (good).

path /users/$userId is User {
	read() = isSignedUser();
	write() = isCurrentUser($userId);
}

path /feeds/$feed is Feed {
	read() = isFeedUser($feed);
	write() = isNew(this) || isFeedUser($feed);
}

path /users/$userId/feeds/$feedId is Boolean {
	validate() = root.feeds[$feedId].users[$userId] != null;
}

path /feeds/$feedId/users/$userId is Password {
	write() = this == root.feeds[$feedId].password;
	validate() = root.users[$feedId].feeds[$userId] != null;
}

path /posts/$feedId {
	read() = isFeedUser($feedId);
	write() = isFeedUser($feedId);
}

path /posts/$feedId/$postId is Search | Page;

type User {
  	name: String,
  	image: String,
  	feed: FeedId | Null
}

type Feed {
	name: String,
	password: Password
}

type Post {
	kind: String,
	user: UserId,
	time: Number,
	parent: String | Null
}

type Search extends Post {
	url: String,
	query: String

	validate() = isMyAndParentKind(this, 'search', null);
}

type Page extends Post {
	url: String,
	title: String,

	validate() = isMyKind(this, 'page') && (isParentKind(this, null) || isParentKind(this, 'search'));
}

type Text extends Content {
	text: String,

	validate() = isMyAndParentKind(this, 'text', 'page');
}

type Image extends Content {
	image: String

	validate() = isMyAndParentKind(this, 'text', 'page');
}

type Comment extends Content {
	text: String,

	validate() = this.text.isMyKind(this, 'comment') && !isParentKind(this, null) && !isParentKind(this, 'comment');
}

type UserId extends String {
	validate() = root.users[this] != null;
}

type FeedId extends String {
	validate() = root.feeds[this] != null;
}

type Password extends String;


getParentKind(this) = this.parent()[this.parent].kind;

isMyKind(this, kind) = this.kind == kind;

isParentKind(this, parentKind) = getParentKind(this) == parentKind;

isMyAndParentKind(this, myKind, parentKind) = isMyKind(this, myKind) && isParentKind(this, parentKind); 


isSignedUser() = auth != null;

isCurrentUser(userId) = isSignedUser() && auth.uid == userId;

isFeedUser(feedId) = isSignedUser() && root.feeds[feedId].users[auth.uid] == root.feeds[feedId].password;

isNew(ref) = prior(ref) == null;