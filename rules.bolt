path /users/$userId is User {
	read() = isSignedUser();
	write() = isCurrentUser($userId);
}

path /feeds/$feedId is Feed {
	read() = isFeedUser($feedId);
	write() = isNew(this) || isFeedUser($feedId);
}

path /feeds/$feedId/users/$userId is String {
	write() = isCurrentUser($userId);
	validate() = this == root.feeds[$feedId].password;
}

path /posts/$feedId {
	read() = isFeedUser($feedId);
	write() = isFeedUser($feedId);
}

path /posts/$feedId/$postId is Search | Page | Text | Image | Comment;

type User {
  	name: String,
  	image: String,
  	selectedFeed: String | Null,
  	feeds: Boolean[]
}

type Feed {
	name: String,
	timestamp: Number,
	password: Immutable<String>
}

type Post {
	type: String,
	user: UserId,
	timestamp: Number,
	ancestor: AncestorId
}

type Search extends Post {
	url: String,
	query: String,
	validate() = this.type == 'search' && isAncestorType(this, 'root');
}

type Page extends Post {
	url: String,
	title: String,
	favIconUrl: String,
	validate() = this.type == 'page' && (isAncestorType(this, 'root') || isAncestorType(this, 'search'));
}

type Text extends Post {
	text: String,
	validate() = this.type == 'text' && isAncestorType(this, 'page');
}

type Image extends Post {
	image: String,
	validate() = this.type == 'image' && isAncestorType(this, 'page');
}

type Comment extends Post {
	text: String,
	validate() = this.type == 'comment';
}

type UserId extends String {
	validate() = root.users[this] != null;
}

type FeedId extends String {
	validate() = root.feeds[this] != null;
}

type AncestorId extends String {
	validate() = this == 'root' || this.parent().parent()[this] != null;
}

type Immutable<T> {
	validate() = isNew(this) || this == prior(this);
}

isAncestorType(post, type) = type == 'root' || post.parent()[post.ancestor].type == type;

isSignedUser() = auth != null;

isCurrentUser(userId) = isSignedUser() && auth.uid == userId;

isFeedUser(feedId) = isSignedUser() && root.feeds[feedId].users[auth.uid] == root.feeds[feedId].password;

isNew(ref) = prior(ref) == null;